generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int          @id @default(autoincrement())
  email          String       @unique
  password       String
  current_role   Role?
  name           String?
  remember_token String?
  verified_at    DateTime?
  profile        ProfileUser?

  @@map("users")
}

model Client {
  id         Int          @id @default(autoincrement())
  first_name String
  last_name  String
  phone      String
  status     Status       @default(PENDING)
  profile    ProfileUser?
  Order      Order[]

  @@map("clients")
}

model Employee {
  id          Int          @id @default(autoincrement())
  first_name  String
  last_name   String
  phone       String
  state_id    Int
  province_id Int
  category_id Int
  is_active   Boolean
  status      Status       @default(PENDING)
  national_id String?
  category    Category     @relation(fields: [category_id], references: [id], onDelete: Cascade)
  province    Province     @relation(fields: [province_id], references: [id], onDelete: Cascade)
  state       State        @relation(fields: [state_id], references: [id], onDelete: Cascade)
  profile     ProfileUser?
  media       Image[]      @relation("employeetoimage")

  @@index([category_id], map: "employees_category_id_fkey")
  @@index([province_id], map: "employees_province_id_fkey")
  @@index([state_id], map: "employees_state_id_fkey")
  @@map("employees")
}

model ProfileUser {
  user_id     Int       @unique
  client_id   Int?      @unique
  employee_id Int?      @unique
  client      Client?   @relation(fields: [client_id], references: [id], onDelete: Cascade)
  employee    Employee? @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("profile_user")
}

model Category {
  id          Int        @id @default(autoincrement())
  name        String
  profession  String
  description String
  urgent      Boolean    @default(false)
  employees   Employee[]
  media       Image[]    @relation("categorytoimage")
  Provider    Provider[]
  job_types   JobType[]  @relation("category_jobtype")
  items       Item[]
  Order       Order[]

  @@map("categories")
}

model Image {
  id         Int        @id @default(autoincrement())
  name       String
  path       String
  type       MediaType
  categories Category[] @relation("categorytoimage")
  employees  Employee[] @relation("employeetoimage")

  @@map("images")
}

model State {
  id        Int        @id @default(autoincrement())
  code      Int
  name      String
  name_ar   String
  employees Employee[]
  provinces Province[]
  Provider  Provider[]

  @@map("states")
}

model Province {
  id           Int        @id @default(autoincrement())
  name         String
  name_ar      String
  city_name    String
  city_name_ar String
  state_id     Int
  employees    Employee[]
  state        State      @relation(fields: [state_id], references: [id], onDelete: Cascade)
  Provider     Provider[]

  @@index([state_id], map: "provinces_state_id_fkey")
  @@map("provinces")
}

model SocialMedia {
  id        Int                   @id @default(autoincrement())
  name      String
  providers ProviderSocialmedia[]

  @@map("social_media")
}

model Provider {
  id            Int                   @id @default(autoincrement())
  province_id   Int
  state_id      Int
  category_id   Int
  shop_name     String                @unique
  phone_number  String                @unique
  phone_number2 String?               @unique
  province      Province              @relation(fields: [province_id], references: [id], onDelete: Cascade)
  state         State                 @relation(fields: [state_id], references: [id], onDelete: Cascade)
  category      Category              @relation(fields: [category_id], references: [id], onDelete: Cascade)
  social_media  ProviderSocialmedia[]

  @@map("providers")
}

model ProviderSocialmedia {
  provider        Provider    @relation(fields: [provider_id], references: [id], onDelete: Cascade)
  provider_id     Int
  social_media    SocialMedia @relation(fields: [social_media_id], references: [id], onDelete: Cascade)
  social_media_id Int
  link            String

  @@id([provider_id, social_media_id])
  @@map("provider_socialmedia")
}

model JobType {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  has_items  Boolean    @default(false)
  categories Category[] @relation("category_jobtype")
  items      Item[]
  Order      Order[]

  @@map("job_types")
}

model Item {
  id          Int         @id @default(autoincrement())
  name        String
  price       Float       @default(0.0)
  category_id Int
  job_type_id Int
  category    Category    @relation(fields: [category_id], references: [id], onDelete: Cascade)
  job_type    JobType     @relation(fields: [job_type_id], references: [id], onDelete: Cascade)
  orders      ItemOrder[]

  @@map("items")
}

model Order {
  id          Int         @id @default(autoincrement())
  client_id   Int
  description String?
  date        DateTime
  hour        String
  category_id Int
  job_type_id Int
  status      OrderStatus @default(PENDING)
  is_urgent   Boolean     @default(false)

  client   Client      @relation(fields: [client_id], references: [id], onDelete: Cascade)
  category Category    @relation(fields: [category_id], references: [id], onDelete: Cascade)
  job_type JobType     @relation(fields: [job_type_id], references: [id], onDelete: Cascade)
  items    ItemOrder[]

  @@map("orders")
}

model ItemOrder {
  item     Item  @relation(fields: [item_id], references: [id], onDelete: Cascade)
  item_id  Int
  order    Order @relation(fields: [order_id], references: [id], onDelete: Cascade)
  order_id Int
  quantity Int   @default(1)

  @@id([item_id, order_id])
  @@map("item_order")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model media {
  id                    BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  model_type            String    @db.VarChar(255)
  model_id              BigInt    @db.UnsignedBigInt
  uuid                  String?   @unique(map: "media_uuid_unique") @db.Char(36)
  collection_name       String    @db.VarChar(255)
  name                  String    @db.VarChar(255)
  file_name             String    @db.VarChar(255)
  mime_type             String?   @db.VarChar(255)
  disk                  String    @db.VarChar(255)
  conversions_disk      String?   @db.VarChar(255)
  size                  BigInt    @db.UnsignedBigInt
  manipulations         Json
  custom_properties     Json
  generated_conversions Json
  responsive_images     Json
  order_column          Int?      @db.UnsignedInt
  created_at            DateTime? @db.Timestamp(0)
  updated_at            DateTime? @db.Timestamp(0)

  @@index([model_type, model_id], map: "media_model_type_model_id_index")
  @@index([order_column], map: "media_order_column_index")
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

enum Role {
  ADMIN
  CLIENT
  EMPLOYEE
}

enum MediaType {
  CATEGORY
  SELFIE
  ID
}

enum Status {
  PENDING
  VALID
  REFUSED
}

enum OrderStatus {
  PENDING
  PROCESSING
  DONE
  CANCELLED
}
