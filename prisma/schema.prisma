generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int          @id @default(autoincrement())
  email          String       @unique
  password       String
  current_role   Role?
  name           String?
  remember_token String?
  verified_at    DateTime?
  profile        ProfileUser?

  @@map("users")
}

model Client {
  id           Int            @id @default(autoincrement())
  first_name   String
  last_name    String
  phone        String
  status       Status         @default(PENDING)
  Order        Order[]
  profile      ProfileUser?
  Construction Construction[]

  @@map("clients")
}

model Employee {
  id            Int             @id @default(autoincrement())
  first_name    String
  last_name     String
  phone         String
  state_id      Int
  province_id   Int
  category_id   Int
  is_active     Boolean
  status        Status          @default(PENDING)
  national_id   String?
  category      Category        @relation(fields: [category_id], references: [id], onDelete: Cascade)
  province      Province        @relation(fields: [province_id], references: [id], onDelete: Cascade)
  state         State           @relation(fields: [state_id], references: [id], onDelete: Cascade)
  groups        EmployeeGroup[]
  offers        Offer[]
  orders        Order[]
  profile       ProfileUser?
  media         Image[]         @relation("employeetoimage")
  constructions Construction[]

  @@index([category_id], map: "employees_category_id_fkey")
  @@index([province_id], map: "employees_province_id_fkey")
  @@index([state_id], map: "employees_state_id_fkey")
  @@map("employees")
}

model ProfileUser {
  user_id     Int       @unique
  client_id   Int?      @unique
  employee_id Int?      @unique
  client      Client?   @relation(fields: [client_id], references: [id], onDelete: Cascade)
  employee    Employee? @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("profile_user")
}

model Category {
  id            Int            @id @default(autoincrement())
  name          String
  profession    String
  description   String         @db.Text
  urgent        Boolean        @default(false)
  employees     Employee[]
  items         Item[]
  Order         Order[]
  Provider      Provider[]
  job_types     JobType[]      @relation("category_jobtype")
  media         Image[]        @relation("categorytoimage")
  constructions Construction[] @relation("category_construction")

  @@map("categories")
}

model Image {
  id         Int        @id @default(autoincrement())
  name       String
  path       String
  type       MediaType
  categories Category[] @relation("categorytoimage")
  employees  Employee[] @relation("employeetoimage")

  @@map("images")
}

model State {
  id        Int        @id @default(autoincrement())
  code      Int
  name      String
  name_ar   String
  employees Employee[]
  Provider  Provider[]
  provinces Province[]

  @@map("states")
}

model Province {
  id           Int        @id @default(autoincrement())
  name         String
  name_ar      String
  city_name    String
  city_name_ar String
  state_id     Int
  employees    Employee[]
  Provider     Provider[]
  state        State      @relation(fields: [state_id], references: [id], onDelete: Cascade)

  @@index([state_id], map: "provinces_state_id_fkey")
  @@map("provinces")
}

model SocialMedia {
  id        Int                   @id @default(autoincrement())
  name      String
  providers ProviderSocialmedia[]

  @@map("social_media")
}

model Provider {
  id            Int                   @id @default(autoincrement())
  province_id   Int
  state_id      Int
  category_id   Int
  shop_name     String                @unique
  phone_number  String                @unique
  phone_number2 String?               @unique
  description   String?               @db.Text
  media         media[]
  social_media  ProviderSocialmedia[]
  category      Category              @relation(fields: [category_id], references: [id], onDelete: Cascade)
  province      Province              @relation(fields: [province_id], references: [id], onDelete: Cascade)
  state         State                 @relation(fields: [state_id], references: [id], onDelete: Cascade)

  @@index([category_id], map: "providers_category_id_fkey")
  @@index([province_id], map: "providers_province_id_fkey")
  @@index([state_id], map: "providers_state_id_fkey")
  @@map("providers")
}

model ProviderSocialmedia {
  provider_id     Int
  social_media_id Int
  link            String
  provider        Provider    @relation(fields: [provider_id], references: [id], onDelete: Cascade)
  social_media    SocialMedia @relation(fields: [social_media_id], references: [id], onDelete: Cascade)

  @@id([provider_id, social_media_id])
  @@index([social_media_id], map: "provider_socialmedia_social_media_id_fkey")
  @@map("provider_socialmedia")
}

model JobType {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  has_items  Boolean    @default(false)
  items      Item[]
  Order      Order[]
  categories Category[] @relation("category_jobtype")

  @@map("job_types")
}

model Item {
  id          Int         @id @default(autoincrement())
  name        String
  min_price   Float       @default(0)
  max_price   Float       @default(0)
  category_id Int
  job_type_id Int
  unit        String      @default("unit")
  orders      ItemOrder[]
  category    Category    @relation(fields: [category_id], references: [id], onDelete: Cascade)
  job_type    JobType     @relation(fields: [job_type_id], references: [id], onDelete: Cascade)

  @@index([category_id], map: "items_category_id_fkey")
  @@index([job_type_id], map: "items_job_type_id_fkey")
  @@map("items")
}

model Order {
  id          Int         @id @default(autoincrement())
  client_id   Int
  description String?     @db.Text
  date        DateTime
  hour        String
  category_id Int
  job_type_id Int
  status      OrderStatus @default(PENDING)
  is_urgent   Boolean     @default(false)
  accepted_at DateTime?
  employee_id Int?
  items       ItemOrder[]
  Offer       Offer[]
  category    Category    @relation(fields: [category_id], references: [id], onDelete: Cascade)
  client      Client      @relation(fields: [client_id], references: [id], onDelete: Cascade)
  employee    Employee?   @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  job_type    JobType     @relation(fields: [job_type_id], references: [id], onDelete: Cascade)

  @@index([category_id], map: "orders_category_id_fkey")
  @@index([client_id], map: "orders_client_id_fkey")
  @@index([employee_id], map: "orders_employee_id_fkey")
  @@index([job_type_id], map: "orders_job_type_id_fkey")
  @@map("orders")
}

model ItemOrder {
  item_id  Int
  order_id Int
  quantity Int   @default(1)
  item     Item  @relation(fields: [item_id], references: [id], onDelete: Cascade)
  order    Order @relation(fields: [order_id], references: [id], onDelete: Cascade)

  @@id([item_id, order_id])
  @@index([order_id], map: "item_order_order_id_fkey")
  @@map("item_order")
}

model Offer {
  id          Int         @id @default(autoincrement())
  employee_id Int
  order_id    Int
  can_travel  Boolean     @default(true)
  price       Float       @default(0)
  status      OfferStatus @default(PENDING)
  employee    Employee    @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  order       Order       @relation(fields: [order_id], references: [id], onDelete: Cascade)

  @@index([employee_id], map: "offers_employee_id_fkey")
  @@index([order_id], map: "offers_order_id_fkey")
  @@map("offers")
}

model Group {
  id            Int             @id @default(autoincrement())
  name          String
  employees     EmployeeGroup[]
  constructions Construction[]

  @@map("groups")
}

model EmployeeGroup {
  group_id    Int
  employee_id Int
  is_leader   Boolean
  Employee    Employee? @relation(fields: [employee_id], references: [id])
  Group       Group?    @relation(fields: [group_id], references: [id])

  @@id([group_id, employee_id])
  @@map("emplopyee_group")
}

model Construction {
  id           Int              @id @default(autoincrement())
  client_id    Int
  description  String?          @db.Text
  date         DateTime
  hour         String
  type         ConstructionType
  floors_nbr   Int?
  chambers_nbr Int?
  status       OrderStatus      @default(PENDING)
  employee_id  Int?
  group_id     Int?
  accepted_at  DateTime?

  client     Client     @relation(fields: [client_id], references: [id], onDelete: Cascade)
  categories Category[] @relation("category_construction")
  Employee   Employee?  @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  Group      Group?     @relation(fields: [group_id], references: [id], onDelete: Cascade)

  @@map("constructions")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model media {
  id                    BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  model_type            String    @db.VarChar(255)
  model_id              BigInt    @db.UnsignedBigInt
  uuid                  String?   @unique(map: "media_uuid_unique") @db.Char(36)
  collection_name       String    @db.VarChar(255)
  name                  String    @db.VarChar(255)
  file_name             String    @db.VarChar(255)
  mime_type             String?   @db.VarChar(255)
  disk                  String    @db.VarChar(255)
  conversions_disk      String?   @db.VarChar(255)
  size                  BigInt    @db.UnsignedBigInt
  manipulations         Json
  custom_properties     Json
  generated_conversions Json
  responsive_images     Json
  order_column          Int?      @db.UnsignedInt
  created_at            DateTime? @db.Timestamp(0)
  updated_at            DateTime? @db.Timestamp(0)
  providerId            Int?
  Provider              Provider? @relation(fields: [providerId], references: [id])

  @@index([model_type, model_id], map: "media_model_type_model_id_index")
  @@index([order_column], map: "media_order_column_index")
  @@index([providerId], map: "media_providerId_fkey")
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

model model_has_permissions {
  permission_id BigInt      @db.UnsignedBigInt
  model_type    String      @db.VarChar(255)
  model_id      BigInt      @db.UnsignedBigInt
  permissions   permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "model_has_permissions_permission_id_foreign")

  @@id([permission_id, model_id, model_type])
  @@index([model_id, model_type], map: "model_has_permissions_model_id_model_type_index")
}

model model_has_roles {
  role_id    BigInt @db.UnsignedBigInt
  model_type String @db.VarChar(255)
  model_id   BigInt @db.UnsignedBigInt
  roles      roles  @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "model_has_roles_role_id_foreign")

  @@id([role_id, model_id, model_type])
  @@index([model_id, model_type], map: "model_has_roles_model_id_model_type_index")
}

model permissions {
  id                    BigInt                  @id @default(autoincrement()) @db.UnsignedBigInt
  name                  String                  @db.VarChar(255)
  guard_name            String                  @db.VarChar(255)
  created_at            DateTime?               @db.Timestamp(0)
  updated_at            DateTime?               @db.Timestamp(0)
  model_has_permissions model_has_permissions[]
  role_has_permissions  role_has_permissions[]

  @@unique([name, guard_name], map: "permissions_name_guard_name_unique")
}

model role_has_permissions {
  permission_id BigInt      @db.UnsignedBigInt
  role_id       BigInt      @db.UnsignedBigInt
  permissions   permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "role_has_permissions_permission_id_foreign")
  roles         roles       @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "role_has_permissions_role_id_foreign")

  @@id([permission_id, role_id])
  @@index([role_id], map: "role_has_permissions_role_id_foreign")
}

model roles {
  id                   BigInt                 @id @default(autoincrement()) @db.UnsignedBigInt
  name                 String                 @db.VarChar(255)
  guard_name           String                 @db.VarChar(255)
  created_at           DateTime?              @db.Timestamp(0)
  updated_at           DateTime?              @db.Timestamp(0)
  model_has_roles      model_has_roles[]
  role_has_permissions role_has_permissions[]

  @@unique([name, guard_name], map: "roles_name_guard_name_unique")
}

model activity_log {
  id           BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  log_name     String?   @db.VarChar(255)
  description  String    @db.Text
  subject_type String?   @db.VarChar(255)
  event        String?   @db.VarChar(255)
  subject_id   BigInt?   @db.UnsignedBigInt
  causer_type  String?   @db.VarChar(255)
  causer_id    BigInt?   @db.UnsignedBigInt
  properties   Json?
  batch_uuid   String?   @db.Char(36)
  created_at   DateTime? @db.Timestamp(0)
  updated_at   DateTime? @db.Timestamp(0)

  @@index([log_name], map: "activity_log_log_name_index")
  @@index([causer_type, causer_id], map: "causer")
  @@index([subject_type, subject_id], map: "subject")
}

enum Role {
  ADMIN
  CLIENT
  EMPLOYEE
}

enum MediaType {
  CATEGORY
  SELFIE
  ID
}

enum Status {
  PENDING
  VALID
  REFUSED
}

enum OrderStatus {
  PENDING
  PROCESSING
  DONE
  CANCELLED
}

enum OfferStatus {
  PENDING
  ACCEPTED
  REFUSED
}

enum ConstructionType {
  NEW
  RENOVATION
}
